@page "/contacts-manager"



@inject NavigationManager NavManager
@inject CustomAuthenticationStateProvider authenticationStateProvider
@inject IContactsEndPoint _contactService
@inject ILocalStorageService _localStorageService
@inject AuthenticatedUserModel _authedModel
@inject NavigationManager NavMan
@inject AuthenticatedUserModel authedUserModel
@inject ILocalStorageService _localStorage

@implements IAsyncDisposable
@inject IJSRuntime _jsRunTime



<head>
    <link rel="stylesheet" href="css/manager.css" />
</head>
<title>Manager</title>
<Popup @ref="popupReference" />
<DeleteContactPopup @ref="deleteContactPopup" />

@if(Errors!=null && Errors.Count() > 0)
{
    @foreach(var error in Errors)
    {
        <p>@error</p>
    }
}

@if (IsLoading)
{
    <p>Loading</p>
}
else if (IsDeleting)
{
    //This will be empty because there is a Popup displayed
}
else
{   

    
    <div class="row sticky-top fixed-position bg-light p-2">
      
        <div class="col-4 m-2">
          
            <button @onclick="AddContact"><span class="oi oi-plus" aria-hidden="true"></span></button>
         
        </div>
        <div class="col-4">
            <input type="text" id="searchInput" placeholder="Search" class="form-group rounded" />
        </div>
        <div class="col-4">
        </div>
    </div>
    <br/>
    <hr/>
    <table id="contactsTable">
        <tr class="header">
            <th style="width:60%;">Name</th>
            <th style="width:40%;">Phone Number</th>
            <th style="width:40%;">Email</th>
            <th style="width:100%;">Address</th>
            <th style="width:10%;"></th>
            <th style="width:10%;"></th>
        </tr>
        @if (Contacts != null && Contacts.Count>0)
        {
            
        
            @foreach (var contact in Contacts)
            {
                <tr>
                    <td>@contact.Name</td>
                    <td>@contact.PhoneNumber</td>
                    <td>@contact.Email</td>
                    <td>
                    @if(contact.Address != null)
                    {
                        <p>
                            @contact.Address.StreetNumber;  @contact.Address.StreetName; 
                            @contact.Address.City @contact.Address.Province,
                            @contact.Address.Country @contact.Address.ZipCode
                        </p>
                       
                    }
                    
                    </td>
                    <td>
                        <button  @onclick="@(() =>View(contact))" id="edit-btn" class="btn btn-secondary">Edit</button>
                    </td>

                    <td>
                        <button @onclick="@(() =>Delete(contact.Id))" class="btn btn-danger">Delete</button>
                    </td>
                </tr>
            }
        }
    </table>
    
  
}


<!-- Delete Modal -->
<div id="deleteModal" class="modal">

    <!-- Modal content -->
    <div class="modal-content">
        <span class="close">&times;</span>
        <p class="text-danger">Are you sure you want to delete this modal?</p>
        <button class="btn btn-sm btn-danger">Delete</button>
    </div>

</div>

@code {

    private bool isloggedIn;
    private List<ContactsModel>? Contacts = new List<ContactsModel>();
    private List<string>? Errors = new List<string>();
    private bool IsLoading,IsDeleting;
    private AuthenticationState user;
    private Popup popupReference;
    private DeleteContactPopup deleteContactPopup;
    private IJSObjectReference searchContactsObjectRef;

    protected override async Task OnInitializedAsync()
    {

        try
        {
            IsLoading = true;
            await GetContactModelsAsync();
            IsLoading = false;

        }catch(Exception ex)
        {

            Errors.Add($"Opps! Something went wrong : {ex.Message})");
            isloggedIn = false;
        }



    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            IsLoading = true;
            await GetContactModelsAsync();
            isloggedIn = true;
            IsLoading = false;


            searchContactsObjectRef = await _jsRunTime.InvokeAsync<IJSObjectReference>("import", "/js/list-search.js");
            await searchContactsObjectRef.InvokeVoidAsync("addHandlers");

        }

    }


    // <summary>
    // Get All Contact And Display 
    // </summary>
    public async Task GetContactModelsAsync()
    {
        try
        {

            if (user == null)
            {
                user = await authenticationStateProvider.GetAuthenticationStateAsync();
            }
            if(user!= null && user.User.Identity.IsAuthenticated)
            {
                isloggedIn = true;
                Contacts = await _contactService.GetContacts();
            }

        }
        catch (Exception ex)
        {
            Errors.Add($"Opps! Something is wrong while getting Contacts: {ex.Message}");
        }

    }

    //View for editing
    void View(ContactsModel model)
    {
        NavMan.NavigateTo($"contact-details?contactId={model.Id}");
        //NavMan.NavigateTo(NavMan.GetUriWithQueryParameter("contact-details",model.Id));
    }



    //Remove the contact from the db
    void Delete(int id)
    {
        try
        {
            IsDeleting = true;
            deleteContactPopup.Show("Are you sure you want to delete this contact?", "Contact Delete", id);
            //IsLoading = false;
        }catch(Exception ex)
        {
            Errors.Add($"Opps! There was an error {ex.Message}");
        }

    }

    //Add a new contact
    void AddContact()
    {
        NavMan.NavigateTo("create",true);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (searchContactsObjectRef is not null)
        {
            await searchContactsObjectRef.DisposeAsync();
        }
    }
}
