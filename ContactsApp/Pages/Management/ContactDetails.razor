@page "/contact-details/{ContactId:int}"
@page "/contact-details"
@using ContactsAppLibrary.Services.Models
@inject CustomAuthenticationStateProvider authenticationStateProvider
@inject IContactsEndPoint _contactsEndPoint


<head>
    <link rel="stylesheet" href="css/login.css" />
</head>

@if(IsLoading)
{
    <p>Loading...</p>
}
else
{
<div class="row sticky-top fixed-position bg-light" >
    <div class="col-4">

    </div>
    <div class="col-4">
        <button type="submit" class="btn btn-sm btn-primary">Save changes</button>
    </div>
    <div class="col-4">

    </div>
</div>
        <EditForm  Model="Contact" OnValidSubmit="Update">
            <DataAnnotationsValidator />
           
            <div class="container">
                <label for="uname"><b>Name</b></label>
                <input type="text" @bind-value="Contact.Name" placeholder="Enter Username" name="uname" required>
            </div>



            <div class="container">
                <label for="uname"><b>Email</b></label>
                <input type="text" @bind-value="Contact.Email" placeholder="Enter Username" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Phone Number</b></label>
                <input type="text" @bind-value="Contact.PhoneNumber" placeholder="Enter Username" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Street Number</b></label>
                <input type="text" @bind-value="Contact.Address.StreetNumber" placeholder="Enter Street Number" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Street Name</b></label>
                <input type="text" @bind-value="Contact.Address.StreetName" placeholder="Enter Street Name" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Suburb</b></label>
                <input type="text" @bind-value="Contact.Address.Suburb" placeholder="Enter Suburb" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>City</b></label>
                <input type="text" @bind-value="Contact.Address.City" placeholder="Enter City" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Zip Code</b></label>
                <input type="text" @bind-value="Contact.Address.ZipCode" placeholder="Enter UsernZip Codeame" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Province</b></label>
                <input type="text" @bind-value="Contact.Address.Province" placeholder="Enter Province" name="uname"  required>
            </div>

            <div class="container">
                <label for="uname"><b>Country</b></label>
                <input type="text" @bind-value="Contact.Address.Country" placeholder="Enter Country" name="uname" required>
            </div>

        </EditForm>
                
}   
                


@code {
    
  
    
    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }
    private int contactId;
    [Parameter]
    public int ContactId
    {
        get { return contactId; }
        set { contactId = value; }
    }
    private ContactsModel Contact = new ContactsModel();
    private List<string> Errors = new List<string>();
    private bool IsLoading, isloggedIn;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            if (contactId > 0)
            {
                var authProvider = await authenticationStateProvider.GetAuthenticationStateAsync();//Not recommending this but working a better way to solve it 100%
                if (authProvider.User.Identity.IsAuthenticated)
                {
                    isloggedIn = true;

                    Contact = await _contactsEndPoint.GetContact(contactId);
                    if (Contact != null && Contact.Name != null)
                    {
                        IsLoading = false;
                    }
                }

               
            }
            IsLoading = false;

        }catch (Exception ex)
        {
            Errors.Add("Error! Sorry, we had and error");
        }

    }

    async Task Update()
    {
        try
        {
            if (Contact!= null)
            {
                await _contactsEndPoint.UpdateContact(Contact);
                StateHasChanged();
            }
         
        }catch(Exception ex)
        {
            Errors.Add("Opps! Something went wrong");
        }
    }

}
