@page "/contact-details"

@using ContactsAppLibrary.Services.Models
@inject CustomAuthenticationStateProvider authenticationStateProvider
@inject IContactsEndPoint _contactsEndPoint
@inject NavigationManager NavMan


<head>
    <link rel="stylesheet" href="css/login.css" />
</head>


<Popup @ref="popupReference" />
@if(IsLoading)
{
    <p>Loading...</p>
}else if (IsUpdated)
{
    //Popup is displayed hence this is empty
}
else
{
        <EditForm  Model="Contact" OnValidSubmit="Update">
            <div class="row sticky-top fixed-position bg-light">
                <div class="col-4">
                </div>
                <div class="col-4">
                    <button type="submit" class="btn btn-primary m-2 align-content-lg-start">
                     <span class="oi oi-file" aria-hidden="true"></span>Save changes
                    </button>
                </div>
                <div class="col-4">
                </div>
            </div>
            <DataAnnotationsValidator />
           <ValidationSummary/>
            <div class="container">
                <label for="uname"><b>Name</b></label>
                <input type="text" @bind-value="Contact.Name" placeholder="Enter Username" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Email</b></label>
                <input type="text" @bind-value="Contact.Email" placeholder="Enter Username" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Phone Number</b></label>
                <input type="text" @bind-value="Contact.PhoneNumber" placeholder="Enter Username" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Street Number</b></label>
                <input type="text" @bind-value="Contact.Address.StreetNumber" placeholder="Enter Street Number" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Street Name</b></label>
                <input type="text" @bind-value="Contact.Address.StreetName" placeholder="Enter Street Name" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Suburb</b></label>
                <input type="text" @bind-value="Contact.Address.Suburb" placeholder="Enter Suburb" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>City</b></label>
                <input type="text" @bind-value="Contact.Address.City" placeholder="Enter City" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Zip Code</b></label>
                <input type="text" @bind-value="Contact.Address.ZipCode" placeholder="Enter UsernZip Codeame" name="uname" required>
            </div>

            <div class="container">
                <label for="uname"><b>Province</b></label>
                <input type="text" @bind-value="Contact.Address.Province" placeholder="Enter Province" name="uname"  required>
            </div>

            <div class="container">
                <label for="uname"><b>Country</b></label>
                <input type="text" @bind-value="Contact.Address.Country" placeholder="Enter Country" name="uname" required>
            </div>

        </EditForm>
                
}   
                


@code {


    [SupplyParameterFromQuery]
    [Parameter]
    public int ContactId { get; set; }
    private Popup popupReference;
    private ContactsModel Contact = new ContactsModel();
    private List<string> Errors = new List<string>();
    private bool IsLoading, isloggedIn, IsUpdated;
    AuthenticationState user;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            if (ContactId > 0)
            {

                if (user!=null && user.User.Identity.IsAuthenticated)
                {

                    Contact = await _contactsEndPoint.GetContact(ContactId);
                    if (Contact != null && Contact.Name != null)
                    {
                        IsLoading = false;
                    }
                }
                else
                {
                    isloggedIn = true;
                    user = await authenticationStateProvider.GetAuthenticationStateAsync();
                    Contact = await _contactsEndPoint.GetContact(ContactId);
                    if (Contact != null && Contact.Name != null)
                    {
                        IsLoading = false;
                    }
                }


            }

            IsLoading = false;

        }catch (Exception ex)
        {
            Errors.Add("Error! Sorry, we had and error");
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await authenticationStateProvider.GetAuthenticationStateAsync();
        }
    }

    async Task Update()
    {
        try
        {
            if (Contact!= null)
            {
                IsLoading = true;
                IsUpdated = await _contactsEndPoint.UpdateContact(Contact);
                IsLoading = false;

                if (IsUpdated)
                {
                    popupReference.Show($"Great! You succesfully updated  {Contact.Name} Contact details", "Update Success");
                }
               

            }

        }catch(Exception ex)
        {
            Errors.Add($"Opps! Something went wrong: {ex.Message}");
        }
    }


 
}
