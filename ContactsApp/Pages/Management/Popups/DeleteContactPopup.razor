@inject NavigationManager NavMan
@inject IContactsEndPoint _contactService

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

@if (!string.IsNullOrEmpty(Error))
{
    <p class="text-danger">@Error</p>  
}


<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="@(()=>Close())"></button>
        </div>

        <div class="toast-body">
            @BodyText
        </div>

        <button class="btn btn-danger m-2" @onclick="@(()=>Delete())">Delete</button>
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }
    private int contactId;
    private string Error;

    public void Show(string bodyText, string headerText = "", int id = 0)
    {
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;

        //provided that no id is 0
        if (id > 0)
        {
            contactId = id;
        }
        StateHasChanged();
    }


    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        NavMan.NavigateTo("contacts-manager", true);
        StateHasChanged();
        
    }

    //Delete the Contact 
    private async Task Delete()
    {
        try
        {
            if (contactId > 0)
            {
                bool IsDeleted = await _contactService.DeleteContact(contactId);

                if (IsDeleted)
                {
                    IsVisible = false;
                    NavMan.NavigateTo("contacts-manager",true);
                }


            }
        }
        catch (Exception ex)
        {
            Error = $"Opps! There was an error {ex.Message}";
        }

    }
}