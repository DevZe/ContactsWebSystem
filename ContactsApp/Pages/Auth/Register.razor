@page "/register"


@inject IAuthenticationService _authEndPoint
@inject NavigationManager NavManager
@attribute [AllowAnonymous]
<head>
    <link rel="stylesheet" href="css/login.css" />
</head>
@if (Errors.Count > 0)
{
    @foreach(string error in Errors)
    {
        <p class="text-danger">@error</p>
    }
}

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="container container-fluid m-auto shadow rounded">
            <h3 class="text-center">Sign Up</h3>
            <EditForm Model="Input" OnValidSubmit="ClickSubmitRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="container">

                    <label for="uname"><b>Username</b></label>
                    <input type="text" @bind-value="Input.Email" placeholder="Enter Username" name="uname" required>

                    <label for="psw"><b>Password</b></label>
                    <input type="password" @bind-value="Input.Password" placeholder="Enter Password" name="psw" required>
                    <label for="confirmPsw"><b>ConfirmPassword</b></label>
                    <input type="password" @bind-value="Input.ConfirmPassword" placeholder="Confirm Password" name="confirmPsw" required>
                    <button type="submit">Login</button>



                </div>
                @if (Errors != null)
                {
                    @foreach (var error in Errors)
                    {
                        <p class="text-danger">@error</p>
                    }
                }

                @if (Errors!= null && Errors.Count > 0)
                {
                    @foreach (string error in Errors)
                    {
                        <span>@error</span>
                    }

                }


            <div class="container" style="background-color:#f1f1f1">
                <button type="button" @onclick="SignIn" class="signupbtn">Sign In</button>

            </div>
                
            </EditForm>
        </div>
  
}
@if(IsRegistered)
{
    <p>
        You have registered, please to login. Thank you. 
    </p>
}

@code {
    private InputModel Input = new InputModel();
    List<string> Errors = new List<string>();
    private bool IsRegistered;
    private bool IsLoading;
    //Register input dto model 
    private class InputModel
    {
        [Required]
        [EmailAddress (ErrorMessage = "Please enter email address")]
        [Display(Name = "Email Address")]
        internal string? Email { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        internal string? Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        internal string? ConfirmPassword { get; set; }

    }

    //On clicking the submit button method 
    async void ClickSubmitRegister()
    {
        if (Input != null && Input.Email != null && Input.Password != null)
        {
            try
            {
                IsLoading = true;
                IsRegistered = await _authEndPoint.Register(new RegisterModel { Email = Input.Email, Password = Input.Password });
                await InvokeAsync(StateHasChanged);
                if (IsRegistered)
                {
                    IsLoading = false;
                    NavManager.NavigateTo("login");
                }
                IsLoading = false;
            }
            catch (Exception ex)
            {
                Errors.Add("Sorry, there was an error there registering, please");
            }

        }

    }
 
    void SignIn()
    {
        NavManager.NavigateTo("login");
    }
}